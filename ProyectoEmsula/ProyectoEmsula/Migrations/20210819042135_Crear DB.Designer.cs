// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoEmsula.DataContext;

namespace ProyectoEmsula.Migrations
{
    [DbContext(typeof(EmsulaDataContext))]
    [Migration("20210819042135_Crear DB")]
    partial class CrearDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProyectoEmsula.Models.Canal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoCanal");

                    b.HasKey("Id");

                    b.ToTable("Canals");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.CaracteristicaZona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaracteristicadeZona");

                    b.HasKey("Id");

                    b.ToTable("CaracteristicaZonas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CiudadNombre");

                    b.HasKey("Id");

                    b.ToTable("Ciudads");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Compania", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompañiaNombre");

                    b.HasKey("Id");

                    b.ToTable("Companias");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartamentoNombre");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.DiaVisita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiasVisita");

                    b.Property<int>("OrdenVisita");

                    b.HasKey("Id");

                    b.ToTable("DiaVisitas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.FormaAtencion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormaAtencionCliente");

                    b.HasKey("Id");

                    b.ToTable("FormaAtencions");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Gestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avenida");

                    b.Property<string>("Barrio");

                    b.Property<string>("Bloque");

                    b.Property<string>("Calle");

                    b.Property<string>("CorreoElectronico");

                    b.Property<string>("Etapa");

                    b.Property<DateTime>("FechaAperturaNegocio");

                    b.Property<string>("NombreCorto");

                    b.Property<string>("NombreLegalCliente");

                    b.Property<string>("NombreNegocio");

                    b.Property<int>("NumeroCasa");

                    b.Property<long>("NumeroIdentidad");

                    b.Property<long>("NumeroRTN");

                    b.Property<string>("PuntoReferencia");

                    b.Property<string>("ReponsableNegocio");

                    b.Property<int>("TelefonoCasa");

                    b.Property<int>("TelefonoCelular");

                    b.Property<int>("TelefonoNegocio");

                    b.Property<string>("Zona");

                    b.Property<int>("canalid");

                    b.Property<int>("caracteristicaZonaid");

                    b.Property<int>("ciudadid");

                    b.Property<int>("companiaid");

                    b.Property<int>("departamentoid");

                    b.Property<int>("diaVisitaid");

                    b.Property<int>("formaAtencionid");

                    b.Property<int>("puntoPosid");

                    b.Property<int>("puntoRejasid");

                    b.Property<int>("ramoid");

                    b.Property<int>("segmentacionid");

                    b.Property<int>("segmentoid");

                    b.Property<int>("tamanoid");

                    b.Property<int>("territorioid");

                    b.Property<int>("tipoClienteid");

                    b.Property<int>("tipoEmpresaid");

                    b.Property<int>("tipoReferenciaid");

                    b.Property<int>("tipoZonaid");

                    b.Property<int>("zonaEntregaid");

                    b.HasKey("Id");

                    b.HasIndex("canalid");

                    b.HasIndex("caracteristicaZonaid");

                    b.HasIndex("ciudadid");

                    b.HasIndex("companiaid");

                    b.HasIndex("departamentoid");

                    b.HasIndex("diaVisitaid");

                    b.HasIndex("formaAtencionid");

                    b.HasIndex("puntoPosid");

                    b.HasIndex("puntoRejasid");

                    b.HasIndex("ramoid");

                    b.HasIndex("segmentacionid");

                    b.HasIndex("segmentoid");

                    b.HasIndex("tamanoid");

                    b.HasIndex("territorioid");

                    b.HasIndex("tipoClienteid");

                    b.HasIndex("tipoEmpresaid");

                    b.HasIndex("tipoReferenciaid");

                    b.HasIndex("tipoZonaid");

                    b.HasIndex("zonaEntregaid");

                    b.ToTable("Gestions");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.PuntoPos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PuntoconPos");

                    b.HasKey("Id");

                    b.ToTable("PuntoPos");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.PuntoRejas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PuntoconRejas");

                    b.HasKey("Id");

                    b.ToTable("PuntoRejas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Ramo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RamoNombre");

                    b.HasKey("Id");

                    b.ToTable("Ramos");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Segmentacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SegmentacionNombre");

                    b.HasKey("Id");

                    b.ToTable("Segmentacions");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Segmento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SegmentoNombre");

                    b.HasKey("Id");

                    b.ToTable("Segmentos");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Tamano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TamanoNegocio");

                    b.HasKey("Id");

                    b.ToTable("Tamanos");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Territorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoTerritorio");

                    b.HasKey("Id");

                    b.ToTable("Territorios");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.TipoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipoClienteContable");

                    b.HasKey("Id");

                    b.ToTable("TipoClientes");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.TipoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipoEmpresaLegal");

                    b.HasKey("Id");

                    b.ToTable("TipoEmpresas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.TipoReferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tiporeferencia");

                    b.HasKey("Id");

                    b.ToTable("TipoReferencias");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.TipoZona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipoZonaNombre");

                    b.HasKey("Id");

                    b.ToTable("TipoZonas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EstaActivo");

                    b.Property<string>("Permiso");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios","dbo");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.ZonaEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ZonadeEntrega");

                    b.HasKey("Id");

                    b.ToTable("ZonaEntregas");
                });

            modelBuilder.Entity("ProyectoEmsula.Models.Gestion", b =>
                {
                    b.HasOne("ProyectoEmsula.Models.Canal", "canal")
                        .WithMany("gestions")
                        .HasForeignKey("canalid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.CaracteristicaZona", "caracteristicaZona")
                        .WithMany("gestions")
                        .HasForeignKey("caracteristicaZonaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Ciudad", "ciudad")
                        .WithMany("gestions")
                        .HasForeignKey("ciudadid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Compania", "compania")
                        .WithMany("gestions")
                        .HasForeignKey("companiaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Departamento", "departamento")
                        .WithMany("gestions")
                        .HasForeignKey("departamentoid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.DiaVisita", "diaVisita")
                        .WithMany("gestions")
                        .HasForeignKey("diaVisitaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.FormaAtencion", "formaAtencion")
                        .WithMany("gestions")
                        .HasForeignKey("formaAtencionid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.PuntoPos", "puntoPos")
                        .WithMany("gestions")
                        .HasForeignKey("puntoPosid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.PuntoRejas", "puntoRejas")
                        .WithMany("gestions")
                        .HasForeignKey("puntoRejasid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Ramo", "ramo")
                        .WithMany("gestions")
                        .HasForeignKey("ramoid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Segmentacion", "segmentacion")
                        .WithMany("gestions")
                        .HasForeignKey("segmentacionid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Segmento", "segmento")
                        .WithMany("gestions")
                        .HasForeignKey("segmentoid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Tamano", "tamano")
                        .WithMany("gestions")
                        .HasForeignKey("tamanoid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.Territorio", "territorio")
                        .WithMany("gestions")
                        .HasForeignKey("territorioid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.TipoCliente", "tipoCliente")
                        .WithMany("gestions")
                        .HasForeignKey("tipoClienteid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.TipoEmpresa", "tipoEmpresa")
                        .WithMany("gestions")
                        .HasForeignKey("tipoEmpresaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.TipoReferencia", "tipoReferencia")
                        .WithMany("gestions")
                        .HasForeignKey("tipoReferenciaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.TipoZona", "tipoZona")
                        .WithMany("gestions")
                        .HasForeignKey("tipoZonaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProyectoEmsula.Models.ZonaEntrega", "zonaEntrega")
                        .WithMany("gestions")
                        .HasForeignKey("zonaEntregaid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
